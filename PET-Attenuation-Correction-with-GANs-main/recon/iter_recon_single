import os
import numpy as np
import uproot
import matplotlib.pyplot as plt
from skimage.transform import radon, iradon

# Parameters
num_iters = 10
bins = 200
angles = np.linspace(0., 180., 180, endpoint=False)  # degrees

# Input paths (ROOT files)
root_dirs = {
    "NAC": r"C:\Users\INFOLYSiS\Desktop\MSc AI\DeepLearning\roots_testing\NAC_single",
    "AC":  r"C:\Users\INFOLYSiS\Desktop\MSc AI\DeepLearning\roots_testing\AC_single"
}

# Output directories for reconstructed images
output_base = r"C:\Users\INFOLYSiS\Desktop\MSc AI\DeepLearning"
out_dirs = {
    "NAC": os.path.join(output_base, "NAC_test"),
    "AC":  os.path.join(output_base, "AC_test")
}

# Ensure output folders exist
for od in out_dirs.values():
    os.makedirs(od, exist_ok=True)

def osem_reconstruction(sinogram, num_iters):
    estimate = np.ones((sinogram.shape[0], sinogram.shape[0]))  # initial estimate
    for i in range(num_iters):
        projection = radon(estimate, theta=angles, circle=True)
        ratio = sinogram / (projection + 1e-8)
        backproj = iradon(ratio, theta=angles, filter_name=None, circle=True)
        estimate *= backproj
        print(f"Iteration {i+1}/{num_iters} completed")
    return estimate

# Process each folder (NAC and AC)
for label, dir_path in root_dirs.items():
    root_files = [f for f in os.listdir(dir_path) if f.lower().endswith('.root')]
    if not root_files:
        print(f"No ROOT files in {dir_path}")
        continue

    for file_name in root_files:
        file_path = os.path.join(dir_path, file_name)
        print(f"Processing {file_path}")

        # Load coincidence tree
        with uproot.open(file_path) as f:
            tree = f["Coincidences"]
            x1 = tree["globalPosX1"].array(library="np")
            y1 = tree["globalPosY1"].array(library="np")
            x2 = tree["globalPosX2"].array(library="np")
            y2 = tree["globalPosY2"].array(library="np")

        # Compute sinogram coordinates
        theta_vals = np.arctan2(y2 - y1, x2 - x1)
        d_vals     = x1 * np.sin(theta_vals) - y1 * np.cos(theta_vals)

        # Build histogram (sinogram)
        rmax      = 400
        rbins     = np.linspace(-rmax, rmax, bins)
        thetabins = np.linspace(-np.pi/2, np.pi/2, len(angles) + 1)
        sinogram, _, _ = np.histogram2d(d_vals, theta_vals, bins=[rbins, thetabins])

        # Reconstruct
        recon = osem_reconstruction(sinogram, num_iters)

        # Save reconstructed image in corresponding folder
        base = os.path.splitext(file_name)[0]  
        out_path = os.path.join(out_dirs[label], f"{base}.png")
        plt.imsave(out_path, recon, cmap='gray')
        print(f"Saved reconstruction to {out_path}")
